User created '.txt' document with the URLs of the panopto videos that need to be processed.

Proposed '.txt' document context - 
https://panopto.com/{institute}/{VideoID_1}
https://panopto.com/{institute}/{VideoID_2}
https://panopto.com/{institute}/{VideoID_N}

The text document is sent to the server as a request/
A job ID will be made for this request. ie : 294gh54254 10::random hex numbers

Server checks to see if the following is True before continuing:
- Compute service is available.
    /Model Allocation Service Availability
    /Model Compute Service Availability
        //Servers Availabile
        //Servers Status

- Text File is formated correctly. 
- URLs in the video are useable - return valid video link that can be used.


Server defines that all pretests have been completed.
- server sends the text file to the downloader script through subprocess.run(argparse).
if the downloader fails on a file, it will try again up to 3 times before skipping the file.
If a skip happens, the failure will be logged in the users Job ID directory.

Download script downloads audio files from the URL videos.
script parses the outputs as indevidual audio files.

    |identification_code = session_id[:8] # 8 dependant on the session ID variation 
    |   filename = f'{identification_code}_audio.mp4

Proposed file output:
{identification_code}_audio.mp4
    43h5j345_audio.mp4
    954068fg_audio.mp4
    jk43648e_audio.mp4

All files are saved in a directory within a shared drive.
The name of the directory will be the Job ID ie. 294gh54254

Server then takes the job inputs and outputs and places them into a format that links the following:
    UserID
    Request Key ** TODO: Implement an API service for keys to be used.
    Request Date/Time
    Request Input
    Service Output Dounload File Names

File saved as {UserID}_DateTime.txt # Or whatever format fits best.
This is saved locally for client costing. 

Server is now ready to allocate the files to the Copute Services.

## SERVICE MANAGER ##
Server checks what servers are currently available.
All servers will have a maximum of 4 GPUs that can run up to 7 processes at a time on each GPU = 28 Jobs per server.
    /Server checks how many jobs each server has
        //The server with the least amount of current jobs.
        //Server will check the current resources for each servers GPU for availablity

Service then sends a request to the selected server to process the job.
- All servers will have a shared storage drive meaning file transfer is instant.
- All servers will have a maximum of 4 GPUs that can run up to 7 processes at a time.

The request will have the following information in a json format.

    /Compute Server Name            # Parsed from Service Manager
    /UserID                         # Parsed from Request
    /Request Date/Time              
    /Number of Files to Process     # Parsed from the download output
    /Input_Directory                # Parsed from the Job ID
    /Output_Directory               # Parsed from the Job ID /Subfolder "Process Outputs"

Request will be sent to the job que for the compute server.

When server is ready, the job will start.

Once All files have been processed server will clean up directory by removing mp4 files.

Server will move onto the next job in the que.


